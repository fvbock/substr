{"body":"# Description\r\nsubstr is written in golang. It provides both a library and command-line tool to search for a string or other sequence of bytes within a body of data. The body of data can be another string, an array of bytes, or data provided by an io.Reader (i.e., an input stream coming from a file, the network, etc.).\r\n\r\nIt uses the Boyer-Moore algorithm, which does far better than a sequential search. Portions of the data being searched through can be skipped altogether.\r\n\r\n# Library \r\n\r\nYou should be able to reference this library by adding this import to your code:\r\n\r\n import \"github.com/ivancich/substr\"\r\n\r\nThe documentation generated by:\r\n\r\n \"go doc substr\"\r\n\r\nshould be (barely) enough to get you started.\r\n\r\nThere are a number of entry functions depending on the form your data and your search key are in. Some functions just return the first match. Other functions provide all matches, by returning a channel that feeds substr.Result objects, each containing an offset or error.\r\n\r\n# sift -- a command-line tool  \r\n\r\nSift is somewhat modeled after the _grep_ tool, although it's not a replacement. The data you're looking for can be specified as a string or as a sequence of hexadecimal bytes. It will optionally recursively descend through directories.\r\n\r\nRunning:\r\n\r\n sift -help\r\n\r\nwill provide basic usage documentation.","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"A string search library and tool written in golang using the Boyer-Moore algorithm. The tool, named \"sift\", is like a binary grep.","name":"substr","google":""}